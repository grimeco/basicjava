java
   int val;
   cbint(int n)
   {
      val=n;
   }
   static int get(cbint d)
   {
      return d.val;
   }
end java

proc public set(int r,int d)
   java
      r.val=d.val;
   end java
end proc

func public boolean cmplt(int op1,int op2)
   boolean r
   java
      r.val=op1.val<op2.val;
   end java
   return r
end func

func public boolean cmple(int op1,int op2)
   boolean r
   java
      r.val=op1.val<=op2.val;
   end java
   return r

end func

func public boolean cmpgt(int op1,int op2)
   boolean r
   java
      r.val=op1.val>op2.val;
   end java
   return r

end func

func public boolean cmpge(int op1,int op2)
   boolean r
   java
      r.val=op1.val>=op2.val;
   end java
   return r

end func

func public boolean cmpeq(int op1,int op2)
   boolean r
   java
      r.val=op1.val==op2.val;
   end java
   return r

end func

func public boolean cmpne(int op1,int op2)
   boolean r
   java
      r.val=op1.val!=op2.val;
   end java
   return r

end func

func public int add(int op1,int op2)
   int r
   java
      r.val=op1.val+op2.val;
   end java
   return r

end func

func public int sub(int op1,int op2)
   int r
   java
      r.val=op1.val-op2.val;
   end java
   return r

end func

func public int mul(int op1,int op2)
   int r
   java
      r.val=op1.val*op2.val;
   end java
   return r

end func

func public int div(int op1,int op2)
   int r
   java
      r.val=op1.val/op2.val;
   end java
   return r

end func

func public int mod(int op1,int op2)
   int r
   java
      r.val=op1.val%op2.val;
   end java
   return r

end func

func public int neg(int op)
   int r
   java
      r.val=-op.val;
   end java
   return r

end func

proc public inc(int op)
/*!
Ajout 1 au parametre op
correspond a l'operateur classique ++
*/
   java
      op.val++;
   end java
end proc

func public int abs(int op)
/*!
Retourne la valeur absolue
*/
   int r
   java
      r.val=Math.abs(op.val);
   end java
   return r

end func

func public int intRandom(int mini,int maxi)
   /*!
   Retourne un nombre entier au hasard compris dans l'intervalle
   [mini,maxi]
   */
   int r
   java
      r.val=mini.val+(int)(Math.random()*(maxi.val-mini.val+1));
   end java
   return r
end func

func public int shl(int op,int decal)
/*!
Retourne la valeur de op decalee a gauche de la valeur de decal
correspond a l'operateur classique <<
*/
   int r
   java
      r.val=op.val << decal.val;
   end java
   return r
end func

func public int orbin(int op1,int op2)
/*!
Effectue un "ou" bit a bit des deux operandes
Correspond a l'operateur classique |
*/
   int r
   java
      r.val=op1.val | op2.val;
   end java
   return r
end func

func public int andbin(int op1,int op2)
/*!
Effectue un "et" bit a bit des deux operandes
Correspond a l'operateur classique &
*/

   int r
   java
      r.val=op1.val & op2.val;
   end java
   return r
end func
