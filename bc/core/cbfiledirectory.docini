[filedirectory]
proto=proc mkdir(string chemin)exception
proto=$L   Cree un repertoire$L  
proto=proc createDirectories(string chemin)exception
proto=$L   Analyse un chemin et cree TOUS les repertoires necessaires$L  
proto=proc systemOpen(string chemin)exception
proto=$L   Ouvre un fichier externe avec le programme par default associe au type de$L   fichier.$L   Exemple:$L   systemOpen("book.pdf")$L   Remarque:$L   Le chemin ne doit pas debuter par . ou ..$L  
proto=proc renameFile(string ancienNom,string nouveauNom)exception
proto=$L   Permet de renommer un fichier$L  
proto=func boolean existsFile(string nomFichier)
proto=$L   Retourne vrai si et seulement le fichier ou le repertoire existe.$L  
proto=func long sizeFile(string nomFichier)
proto=$L   retourne la taille d'un fichier en nombre d'octets$L  
proto=proc deleteFile(string chemin)exception
proto=$L   Detruit le fichier ou le repertoire specifie$L   deleteFile("toto")$L   Remarque:$L   Si le chemin est un repertoire, celui-ci doit etre vide$L  
proto=proc copyFile(string cheminDepart,string cheminArrivee)exception
proto=$L   Permet de copier un fichier$L  
proto=proc createFile(string chemin)exception
proto=$L   Cree un fichier vide$L  
proto=proc createTmpFile(string nomFichier)exception
proto=$L   Cree un fichier temporaire vide, cree automatiquement tous les sous-repertoires necessaires$L  
proto=func long lastModified(string chemin)
proto=$LRetourne la date de derniere modification d'un fichier$Lexprimee en nombre de milli-secondes ecoulees depuis le 1 janvier 1970 a 0 h GMT
proto=func string lastModifiedDateFile(string chemin)
proto=$L   Retourne la date de derniere modification d'un fichier sous la forme$L   jj/mm/aaaa hh:mm:ttt$L   ou ttt sont les milliemes de secondes$L  
proto=func int superCopyFile(string cheminDepart,string cheminArrivee,boolean bEcrase)exception
proto=$L   si bEcrase vaut vrai, le fichier est toujours recopie$L   sinon$L   le fichier est copie si la date de derniere modification du fichier de depart$L   est plus recente que la date de derniere modification du fichier d'arrivee.$L   Dans ce cas, le chemin d'arrivee est analyse, les sous-repertoires necessaires$L   sont crees automatiquement$L   fin si$L   retourne 1 si le fichier a ete copie, 0 sinon$L  
proto=func string getCurrentDirectory()
proto=$L   Retourne le repertoire de courant user.dir$L  
proto=func string[] getDirectory(string nomDirectory)exception
proto=$L   Retourne le premier niveau$L  
proto=func string[] getSuffixeDirectory(string nomDirectory,string suffixe)exception
proto=$L   Retourne le premier niveau en ne conservant que les noms de fichiers se$L   terminant par le suffixe precise$L   Insensible a la casse$L  
proto=func string[] getRecurseDirectory(string rep,string filtre)
proto=$L   Le parametre 'rep' peut se terminer eventuellement par le symbole / ou$L   le symbole \$L   Retourne la liste de tous les noms absolus de fichiers.$L   ATTENTION : Chaque nom absolu est prefixe par la lettre D ou F (Directory ou File)$L   Le parcours d'arbre est en profondeur.$L   Le parametre 'filtre' permet de definir les suffixes des fichiers a conserver.$L   Chaque suffixe doit etre separe par le symbole ;$L   Le paramere suffixe peut etre ""$L   Exemple .java;jpg;gif$L  
proto=func boolean cutCopyFile(string cheminDepart,string cheminArrivee)exception
proto=$L   Le chemin d'arrivee ne doit pas exister$L   Equivalent de la commande Windows Cut puis Copy$L  
proto=func boolean isDirectory(string chemin)
proto=$L   Retourne vrai si et seulement si le chemin est un repertoire$L  
proto=proc deleteDirectory(string chemin)exception
proto=$L   ATTENTION,$L   detruit le repertoire et TOUS ses sous-repertoires$L  
proto=func int superCopyDirectory(string cheminDepart,string cheminArrivee,boolean bEcrase,boolean bTrace)exception
proto=$L   Le chemin d'arrivee peut se terminer ou non par un slash.$L   si bEcrase vaut vrai, le repertoire est toujours recopie$L   sinon$L   chaque fichier du repertoire est copie si la date de derniere modification du fichier de depart$L   est plus recente que la date de derniere modification du fichier d'arrivee.$L   Dans ce cas, le chemin d'arrivee est analyse, les sous-repertoires necessaires$L   sont crees automatiquement$L   fin si$L   si bTrace vaut vrai affichage du detail des fichiers copies$L   fin si$L   retourne le nombre de fichiers copies$L  
