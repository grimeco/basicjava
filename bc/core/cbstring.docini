[string]
affectation=string = string
operateur=boolean ( string <  string )
operateur=boolean ( string <= string )
operateur=boolean ( string >  string )
operateur=boolean ( string >= string )
operateur=boolean ( string ==  string )
operateur=boolean ( string != string )
operateur=string ( string +  string )
proto=func string trim(string op)
proto=$L   Retourne une chaine apres avoir elimine les espaces a droite et a gauche$L   Exemple:$L   cbstring d$L   d="        ABC              "$L   println(trim(d))$L  
proto=func boolean startsWith(string op,string critere)
proto=$L   Retourne vrai si la chaine op commence par le critere fourni$L   Exemple:$L   cbstring d$L   d="Hello"$L   if startsWith(d,"He")$L      println("Vrai pour He")$L   end if$L   if startsWith(d,"Hell")==true$L      println("Vrai pour Hell")$L   end if$L   if startsWith(d,"Bonsoir")==false$L      println("Faux pour Bonsoir")$L   end if$L  
proto=func boolean endsWith(string op,string critere)
proto=$L   Retourne vrai si la chaine op se termine par le critere fourni$L   Exemple:$L   cbstring d$L   d="Hello"$L   if endsWith(d,"lo")$L      println("Vrai pour lo")$L   end if$L   if endsWith(d,"ello")==true$L      println("Vrai pour ello")$L   end if$L   if endsWith(d,"soir")==false$L      println("Faux pour soir")$L   end if$L  
proto=func string substring(string op,int debut,int fin)
proto=$L   Retourne la sous-chaine de op commencant a l'indice debut inclusif et$L   se terminant a l'indice fin exclusif$L   Attention :$L   utiliser un schema try...catch...end catch si un indice est hors limite.$L   Exemple:$L   cbstring d,r$L   d="Hello"$L   r=subcbstring(d,1,3)$L   println(r)$L  
proto=func string charAt(string op,int indice)
proto=$L   Retourne la sous-chaine de longueur 1 de op commencant a l'indice debut$L   Attention :$L   utiliser un schema try...catch...end catch si l'indice est hors limite.$L   Exemple:$L   cbstring d,r$L   d="Hello"$L   r=charAt(d,1)$L   println(r)$L  
proto=func string right(string op,int debut)
proto=$L   Retourne la sous-chaine de op commencant a l'indice debut$L   Attention :$L   utiliser un schema try...catch...end catch si l'indice est hors limite.$L   Exemple:$L   cbstring d,r$L   d="Hello"$L   r=right(d,1)$L   println(r)$L  
proto=func string left(string op,int fin)
proto=$L   Retourne la sous-chaine de op commencant a l'indice 0 et se terminant$L   a 'indice exclusif fin$L   Attention :$L   utiliser un schema try...catch...end catch si l'indice est hors limite.$L   Exemple:$L   string d,r$L   d="Hello"$L   r=left(d,1)$L   println(r)$L  
proto=func int size(string op)
proto=$L   Retourne le nombre de caracteres de op commencant a l'indice 0$L   Exemple:$L   string d$L   int n$L   d="Hello"$L   n=size(d)$L   println(itos(n))$L  
proto=func int indexOf(string op,string critere)
proto=$L   Retourne l'indice dans op ou se trouve la premiere occurence de critere$L   Retourne -1 si critere ne se trouve pas dans op$L   Exemple:$L   cbstring d$L   int n$L   d="Hello"$L   n=indexOf(d,"lo")$L   println(itos(n))$L   n=indexOf(d,"zut")$L   println(itos(n))$L  
proto=func int lastIndexOf(string op,string critere)
proto=$L   Retourne l'indice dans op ou se trouve la derniere occurence de critere$L   Retourne -1 si critere ne se trouve pas dans op$L   Exemple:$L   string d$L   int n$L   d="Hello"$L   n=lastIndexOf(d,"l")$L   println(itos(n))$L   n=lastIndexOf(d,"zut")$L   println(itos(n))$L  
proto=func string replace(string op,string marqueur,string remplacement)
proto=$L   Retourne une chaine a partir de op$L   ou toutes les occurences du parametre marqueur ont ete remplacees$L   par le parametre remplacement$L   Exemple:$L   string d,r$L   d="HelloHello"$L   r=replace(d,"lo","AZERTY")$L   println(r)$L  
proto=func string toLowerCase(string op)
proto=$L   Retourne une chaine a partir de op$L   ou toutes les lettres majuscules ont ete remplacees par$L   leur equivalent minuscule$L   Exemple:$L   string d,r$L   d="HelloHello"$L   r=toLowerCase(d)$L   println(r)$L  
proto=func string toUpperCase(string op)
proto=$L   Retourne une chaine a partir de op$L   ou toutes les lettres minuscules ont ete remplacees par$L   leur equivalent majuscule$L   Exemple:$L   string d,r$L   d="HelloHello"$L   r=toUpperCase(d)$L   println(r)$L  
proto=func boolean isDigit(string op)
proto=$L   Retourne vrai si et seulement si op ne contient que des chiffres$L   Exemple:$L   string d$L   d="2012"$L   if isDigit(d)$L      println("vrai")$L   else$L      println("faux")$L   end if$L  
proto=func boolean isAscii(string op)
proto=$L   Retourne vrai si et seulement si op ne contient que des$L   caracteres >= a l'espace$L  
proto=func boolean isMinusLetter(string op)
proto=$L   Retourne vrai si et seulement si op ne contient que des lettres minuscules$L   Exemple:$L   cbstring d$L   d="abCd"$L   if isMinusLetter(d)$L      println("vrai")$L   else$L      println("faux")$L   end if$L  
proto=func boolean isMajusLetter(string op)
proto=$L   Retourne vrai si et seulement si op ne contient que des lettres majuscules$L   Exemple:$L   string d$L   d="abCd"$L   if isMajusLetter(d)$L      println("vrai")$L   else$L      println("faux")$L   end if$L  
proto=func boolean isLetter(string op)
proto=$L   Retourne vrai si et seulement si op ne contient que des lettres$L   Exemple:$L   string d$L   d="abCd"$L   if isLetter(d)$L      println("vrai")$L   else$L      println("faux")$L   end if$L  
proto=func string deleteLastChar(string op)
